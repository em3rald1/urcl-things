//
// Tuke and Verlio's take at URCL OS
//
// This version has:
// No meme/useless functions and variables
// No Programs installed by default
// No warnings
// Errors is abreviated to E and Files is abreviated to F
// Shell lite

BITS >= 16
MINREG 3
MINRAM 1024
RUN RAM


STR 0x300, 0x4148 //header length 1 name H
STR 0x301, 1 //push H
STR 0x302, 0x48
STR 0x303, 23 //output
STR 0x304, 1 //push e
STR 0x305, 0x65
STR 0x306, 23 //output
STR 0x307, 1 //push l
STR 0x308, 0x6C
STR 0x309, 23 //output
STR 0x30A, 1 //push o
STR 0x30B, 0x6F
STR 0x30C, 23 //output

STR 0x300, 0x4148 //header length 1 name H
STR 0x301, 1 //push H
STR 0x302, 0x48
STR 0x303, 23 //output
STR 0x304, 1 //push e
STR 0x305, 0x65
STR 0x306, 23 //output
STR 0x307, 1 //push l
STR 0x308, 0x6C
STR 0x309, 23 //output
STR 0x30A, 1 //push o
STR 0x30B, 0x6F
STR 0x30C, 23 //output
STR 0x30D, 1 //push \n
STR 0x30E, 0x0A
STR 0x30F, 23 //output
STR 0x310, 27 //halt

STR 0x320, 0

BRA .Boot

// Load files

// Instruction-Address Table
.InstructionAddressTable
DW 0
DW .Push // 1
DW .Pop // 2
DW .And // 3
DW .Or // 4
DW .Xor // 5
DW .Not // 6
DW .Increment // 7
DW .Decrement // 8
DW .Add // 9
DW .Subtract // 10
DW .Multiply // 11
DW .Divide // 12
DW .Modulo // 13
DW .ShiftLeft // 14
DW .ShiftRight // 15
DW .BranchIfZero // 16
DW .BranchIfNotZero // 17
DW .BranchIfPositive // 18
DW .BranchIfNegative // 19
DW .LoadMemory // 20
DW .StoreMemory // 21
DW .Input // 22
DW .Output // 23
DW .Swap //24
DW .Copy //25
DW .SystemCall // 26
DW .ShellLite //27
DW .Error4
DW .Error4
DW .Error4
DW .Error4

.SystemCalls
DW .Exit // 0
DW .Error2
DW .DriveAddress //2
DW .DriveWrite //3
DW .DriveRead //4

.Files
// Space for File Info
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0
DW 0 // stopper

.SpecialVariables
	// OS Variables
	// Stores whether the OS has already booted.
	.Booted
	DW 0

	// Interpreter Variables
	.Pointer
	// Stores the address of the next instruction to be executed.
	DW 0

	.Instruction
	// Stores the next instruction to be executed.
	DW 0

	// File Scan Variables
	.ScanPointer
	// Stores the address for the pointer scanning the storage for files
	DW 0x0300

	.FileNumber
	// Stores the number of the file currently scanning (is multiplied by two. Ex: File 3 => FileNumber = 6)
	DW 0

	.FileInfoPointer
	// Stores the pointer of the File Info Double Word for the file currently scanning
	DW 0

.Constants
	// Stores the limit of the memory for programs (inclusive)
	.ProgramMemoryLimit
	DW 0xFFFF

	// Stores the limit of the memory for the kernel (exclusive)
	.KernelMemoryLimit
	DW 0x0300

.Boot
    LOD R1, .Booted
    BNZ .ScanFiles, R1
    STR .Booted, 1

	// Here should go stuff that would happen on first launch of the OS

	// (Continues to .ScanFiles)

.ScanFiles
	// Write to .Files
	LOD R2, .FileNumber
	ADD R1, R2, .Files
	STR .FileInfoPointer, R1
    BRG .ShellLite, .FileNumber, 9

    LOD R2, .ScanPointer
	LOD R2, R2

	AND R3, R2, 0xC000 // 1100 0000 0000 0000 // type of header

    BRZ .ShellLite, R3 // If nothing quit scan process
	// 00 = EMPTY; 01 = HEADER; 10 = BODY; 11 = ??

	LOD R2, .ScanPointer
	STR R1, R2 // raw address
    LOD R2, R2

	AND R1, R2, 0x3F00 // 0011 1111 0000 0000 // length
	BSL R1, R1, 2
	MOV R3, R1 // 1111 1100 0000 0000 // length (to the left)

	// Directory is 0 // 0000 0011 0000 0000 // directory

	AND R1, R2, 0x00FF // 0000 0000 1111 1111 // name
	OR R1, R1, R3 // 1111 1100 1111 1111

	LOD R2, .FileInfoPointer
    INC R2, R2
	STR R2, R1

	// Update .ScanPointer for the next cycle and increment .FileNumber
	.ContinueMoment
	LOD R1, .ScanPointer
	LOD R2, R1
    AND R2, R2, 0x3F00 // 0011 1111 0000 0000 // length

	BSR R2, R2, 3 //length in words
	ADD R1, R1, R2

	STR .ScanPointer, R1
	LOD R1, .FileNumber
	ADD R1, R1, 2
	STR .FileNumber, R1

    BRA .ScanFiles

.ShellLite
	//This is the terminal
	//This is jumped to whenever a program ends and when the program starts after it scans files
	//(Shell lite included in lowbloat)
	OUT %79, 0x3E //>
	OUT %79, 0x20 //space
	IN R1, %79
	BRE .ClearConsole, R1, 0x63
	BRE .ListPrograms, R1, 0x6C
	BRE .RunProgram, R1, 0x2F
	BRE .Exit, R1, 0x65
	IMM R1, 0x34
	BRA .Error5

.ClearConsole
	OUT %79, 0x0C
	BRA .ShellLite

.ListPrograms
    // List programs installed

	// Display loaded files
	OUT %79, 0x0A // \n // to put on a new line
	OUT %79, 0x46 // "F" // abreviation for "Files"
	OUT %79, 0x3A // ":"

	INC R1, .Files
	.Loop
    	LOD R2, R1 // load file header
		// check if file
	    BRZ .EndLoop, R2 // exit if zero (no file)

		// continue if file

		AND R2, R2, 0x00FF
		OUT %79, R2 // name
		OUT %79, 0x2C // ","
		OUT %79, 0x20 // " "

		ADD R1, R1, 2
		BRA .Loop
	.EndLoop
	OUT %79, 0x0A
	BRA .ShellLite

.RunProgram
	IN R2, %79
    AND R2, R2, 0x0F
    BRG .Error3, R2, 9 //file doesn't exist

	LSH R2, R2
	ADD R1, R2, .Files
	LOD R1, R1
    BRZ .Error3, R1 //file doesn't exist
	
	STR .Pointer, R1
	OUT %79, 0x0A //new line for program
	// (Continues to .InterpretationLoop)

.InterpretationLoop
	// Interpretation Loop - Run the desired program calling .Execute per instruction

	// Check if instruction pointer is looking at metadata and if so, skip word
	LOD R1, .Pointer
    AND R2, R1, 0x1F
	BNZ .stuff, R2
	INC R1, R1

    .stuff
	// Update PC
	INC R1, R1
	STR .Pointer, R1

	// Load .Instruction
	LOD R2, R1
	STR .Instruction, R2

	CAL .Execute

	BRA .InterpretationLoop
// Execute the instruction stored in memory utlizing the Instruction-Address Table for quicker branching.
.Execute
    LOD R1, .Instruction

    AND R1, R1, 0x1F
	BRZ .ExecEnd, R1

	IMM R2, .InstructionAddressTable
	ADD R1, R1, R2

    LOD R2, R1
    CAL R2 
	.ExecEnd
	RET
// Instructions
.Push
	LOD R1, .Pointer
	INC R1, R1
	STR .Pointer, R1

	LOD R2, R1
	LOD R1, R2
	PSH R1
	RET
.Pop
	POP R0
	RET
.And
	POP R2
	POP R1
	AND R1, R1, R2
	PSH R1
	RET
.Or
	POP R2
	POP R1
	OR R1, R1, R2
	PSH R1
	RET
.Xor
	POP R2
	POP R1
	XOR R1, R1, R2
	PSH R1
	RET
.Not
	POP R1
	NOT R1, R1
	PSH R1
	RET
.Increment
	POP R1
	INC R1, R1
	PSH R1
	RET
.Decrement
	POP R1
	DEC R1, R1
	PSH R1
	RET
.Add
	POP R2
	POP R1
	ADD R1, R1, R2
	PSH R1
	RET
.Subtract
	POP R1 // -1
	POP R2 // -2
	SUB R1, R1, R2 // -1 - -2
	PSH R1
	RET
.Multiply
	POP R2
	POP R1
	MLT R1, R1, R2
	PSH R1
	RET
.Divide
	POP R2
	POP R1
	DIV R1, R1, R2
	PSH R1
	RET
.Modulo
	POP R2
	POP R1
	MOD R1, R1, R2
	PSH R1
	RET
.ShiftLeft
	POP R2
	POP R1
	BSL R1, R1, R2
	PSH R1
	RET
.ShiftRight
	POP R2
	POP R1
	BSR R1, R1, R2
	PSH R1
	RET
.BranchIfZero // TODO verify to not jump outside program // TODO make jump relative
	POP R1 // -1
	POP R2 // -2
	BNZ .BRZEnd, R1 // Branches depending on -1, to -2
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BRZEnd
	RET
.BranchIfNotZero
	POP R1
	POP R2
	BRZ .BNZEnd, R1
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BNZEnd
	RET
.BranchIfPositive
	POP R1
	POP R2
	BRN .BRPEnd, R1
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BRPEnd
	RET
.BranchIfNegative
	POP R1
	POP R2
	BRP .BRNEnd, R1
    LOD R1, .KernelMemoryLimit
	BRL .Error1, R2, R1 //trying to jump to kernel
	LOD R1, .Pointer
	ADD R1, R1, R2
	DEC R1, R1
	STR .Pointer, R1
	.BRNEnd
	RET
.LoadMemory
	POP R1

	// Check if address is addressing kernel
	LOD R2, .KernelMemoryLimit
	BRL .Error0, R1, R2

	LOD R2, R1
	PSH R2
	RET
.StoreMemory
	POP R1

	// Check if address is adressing kernel
	LOD R2, .KernelMemoryLimit
	BRL .Error0, R1, R2

	POP R2
	STR R1, R2
	PSH R1
	RET
.Input
	IN R1, %79
	PSH R2
	RET
.Output
	POP R2
	OUT %79, R2
	RET
.Swap
	POP R1
	POP R2
	DEC R1
	MOV R3, VSP //save return stack address
	SUB VSP, VSP, R1 //subtract to reach the swap section
	POP R1
	PSH R2
	MOV VSP, R3
	PSH R1
	RET
.Copy
	POP R1
	PSH R1
	PSH R1
	RET
.SystemCall
    POP R1

    AND R1, R1, 0x0F
	// Only 16 system calls? (For now?)
	BRG .Error2, R1, 4 //system call does not exist

	IMM R2, .SystemCalls
	ADD R1, R1, R2

    LOD R2, R1
    CAL R2

	RET
// System Calls
.Exit
	// Exit (CPU)
	// Halt the CPU, exiting the OS
	HLT
.DriveAddress
	//Output Address
	POP R2
	OUT %121, R2
	PSH R2
	RET
.DriveWrite
	//Write
	POP R2
	OUT %123, R2
	PSH R2
	RET
.DriveRead
	//Read
	IN R2, %123
	PSH R2
	RET
.Error
    //Prints "Error (number)"
	OUT %79, 0x0A
    OUT %79, 0x45 //E
    OUT %79, R1
    OUT %79, 0x0A
    BRA .ShellLite
.Error0
    IMM R1, 0x30
    BRA .Error
.Error1
    IMM R1, 0x31
    BRA .Error
.Error2
    IMM R1, 0x32
    BRA .Error
.Error3
    IMM R1, 0x33
    BRA .Error
.Error4
	IMM R1, 0x34
	BRA .Error
.Error5
	IMM R1, 0x35
	BRA .Error
